\documentclass{article}

\setlength{\topmargin}{-.5in}
\setlength{\oddsidemargin}{.125in}
\setlength{\textwidth}{6.25in}

% page numbering style
\usepackage{fancyhdr}
\pagestyle{fancy}
\renewcommand{\headrulewidth}{0pt}
\fancyhf{}
\fancyfoot[R]{\thepage}
\fancypagestyle{plain}{%
    \renewcommand{\headrulewidth}{0pt}%
    \fancyhf{}%
    \fancyfoot[R]{\thepage}%
}

\usepackage{float}

\begin{document}
\SweaveOpts{concordance=TRUE, echo=TRUE}

<<echo=FALSE>>=
library(ggplot2)
library(rstan)
library(ggcorrplot)

rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rstan_ggtheme_options(legend.position = 'none')

set.seed(0)
@

<<echo=FALSE>>=
data.cleaned = read.csv('../data/stack_overflow_survey_2016_cleaned.csv')
@

<<echo=FALSE>>=
# helper functions
GetNonNaData = function(summary.col, additional.cols = NULL) {
  min.occurences = 35
  CountNonNa = function(x) {length(x[!is.na(x)])}

  counts = tapply(data.cleaned[, summary.col], data.cleaned$country, CountNonNa)
  countries = names(counts[counts >= min.occurences])

  result.cols = c('country', summary.col, additional.cols)
  df.selected = na.omit(data.cleaned[data.cleaned$country %in% countries, result.cols])
  df.other = na.omit(data.cleaned[!data.cleaned$country %in% countries, result.cols])
  df.other$country = 'Other'

  return(rbind(df.selected, df.other))
}
@

\title{Mathematics Developers Survey 2016}
\author{Nejc Ileni\v{c}}
\date{}
\maketitle

\section{Introduction}
Anonymised responses from Stack Overflow Annual Developer Survey are published each year along the results to encourage their further analysis. Being curious about where in the world an aspiring data scientist should start his/her career, I have decided to use the available data in an attempt to answer this question and to learn more about people identifying themselves as mathematics developers.

The survey consisted mostly of demographic questions and questions regarding professional work and technology. Some specific questions that we will seek answers to are \textit{In which countries are mathematics developers most satisfied with their jobs?}, \textit{In which countries do mathematics developers make the most money?}, \textit{How is compensation related to the level of satisfaction}? and alike.

\vspace{2mm}

An important thing to note when interpreting the results however is that this data may not be a represantative sample from the population of mathematics developers. One should keep in mind that these are developers who were aware of the survey and were willing to answer the questions.

\section{Data Preparation}
The dataset was constructed from survey that took place from January 7 to January 25, 2016, with responses originating from Stack Overflow, Stack Exchange technical sites, Facebook and Twitter. Raw data consists of 56030 samples and 66 features, all of which are optional.

In order to obtain an adequately sizable sample, I have decided to include all respondents that belong to the occupation group of mathematics developers, which includes data scientists, machine learning developers and developers with statistics and mathematics backgrounds. After filtering out other occupations and responses with unknown countries we are left with 2132 samples.

\vspace{2mm}

Number of mathematics developers per country can be seen in Figure \ref{fig_0}. Minimum number of 40 respondents is required to take the country into account and all others are placed into a single group called \textit{Other}. Note that selected countries and number of people may be different when doing inference of specific features due to missing values (i.e. optional answers in the survey). Majority of respondents are from United States, followed by a combination of countries with less than 40 developers, United Kingdom, Germany and India.

<<echo=FALSE>>=
# NUMBER OF RESPONDENTS
num.respondents.plot = ggplot(GetNonNaData('country')) +
  geom_bar(aes(x = reorder(country, country, function(x) - length(x))), fill = 'chocolate1') +
  geom_text(stat = 'count', aes(x = country, label = ..count..), vjust = -.05) +
  labs(x = 'Country', y = 'Number of respondents') +
  theme(axis.text.x = element_text(
    size  = 10,
    angle = 45,
    hjust = 1,
    vjust = 1)
  )

ggsave(
  paste('../plots/num_respondents_per_country.png'),
  num.respondents.plot
)
@

\begin{figure}[H]
\centering
<<fig=True,width=5,height=4,echo=FALSE>>=
num.respondents.plot
@
\caption{Number of mathematics developers per country.}\label{fig_0}
\end{figure}

\section{Job Satisfaction}
todo

<<echo=FALSE>>=
# JOB SATISFACTION: data preparation
params = c('theta[1]', 'theta[2]', 'theta[3]', 'theta[4]', 'theta[5]')
params.labels = c(
  'I hate my job',
  'I\'m somewhat dissatisfied with my job',
  'I\'m neither satisfied nor dissatisfied',
  'I\'m somewhat satisfied with my job',
  'I love my job'
)
params.satisfied = 5
params.unsatisfied = c(1, 2, 3, 4)

data.satisfaction = GetNonNaData('job_satisfaction')
data.satisfaction$country = droplevels(data.satisfaction$country)
data.satisfaction = data.satisfaction[data.satisfaction$job_satisfaction != 'I don\'t have a job',]
data.satisfaction$job_satisfaction = droplevels(data.satisfaction$job_satisfaction)

# reorder factor levels
reordered.levels = levels(data.satisfaction$job_satisfaction)[c(1, 4, 3, 5, 2)]
data.satisfaction$job_satisfaction = factor(data.satisfaction$job_satisfaction, reordered.levels)
@

<<echo=FALSE>>=
# JOB SATISFACTION: stan data preparation
countries = unique(data.satisfaction$country)
stan.data = list()

for (country in countries) {
  y = as.numeric(data.satisfaction[data.satisfaction$country == country, 'job_satisfaction'])
  stan.data[[country]] = list(
    n = length(y),
    k = length(params),
    y = y,
    a = c(1, 1, 1, 1, 1)
  )
}
@

<<computation,results=hide,echo=FALSE>>=
# JOB SATISFACTION: model fitting and diagnostic plots saving
stan.fits = list()

for (country in countries) {
  # fit a model
  stan.fits[[country]] = stan(
    file = '../models/multinomial_dirichlet.stan',
    data = stan.data[[country]],
    iter = 1000,
    warmup = 200,
    chains = 1
  )

  trace.plot = traceplot(stan.fits[[country]], pars = params)
  ggsave(
    paste('../plots/job_satisfaction_traceplot_', tolower(country), '.png', sep = ''),
    trace.plot
  )

  summ = summary(stan.fits[[country]], pars = params)$summary
  write.table(
    summ,
    paste('../plots/job_satisfaction_summary_', tolower(country), '.txt', sep = '')
  )
}
@

<<echo=FALSE>>=
# JOB SATISFACTION: posterior predictive check (satisfied - not satisfied log odds ratio)
empirical.logodds = data.frame()
posterior.logodds = data.frame()

for (country in countries) {
  observed.dataset = stan.data[[country]]$y
  n = stan.data[[country]]$n
  pred.datasets = extract(stan.fits[[country]], pars = 'y_datasets')$y_datasets

  # empirical log odds
  num.satisfied = length(Filter(function(x) x == params.satisfied, observed.dataset))
  num.unsatisfied = length(Filter(function(x) x %in% params.unsatisfied, observed.dataset))
  df = data.frame(lo = log(num.satisfied / num.unsatisfied), n = n, country = country)
  empirical.logodds = rbind(empirical.logodds, df)

  # replicated log odds
  # num.satisfied = rowSums(pred.datasets[, params.satisfied])
  num.satisfied = pred.datasets[, params.satisfied]
  num.unsatisfied = rowSums(pred.datasets[, params.unsatisfied])
  df = data.frame(lo = log(num.satisfied / num.unsatisfied), country = country)
  posterior.logodds = rbind(posterior.logodds, df)
}

posterior.check.plot = ggplot(posterior.logodds, aes(x = lo)) +
  geom_histogram(binwidth = .2, fill = 'dodgerblue') +
  geom_vline(data = empirical.logodds, aes(xintercept = lo), colour = 'red') +
  facet_wrap(~country) +
  labs(x = 'Posterior predictive log odds', y = 'Count')

ggsave(
  paste('../plots/job_satisfaction_posterior_check.png'),
  posterior.check.plot
)
@

\begin{figure}[H]
\centering
<<fig=True,width=6,height=7,echo=FALSE>>=
posterior.check.plot
@
\caption{todo.}\label{fig_1}
\end{figure}

<<echo=FALSE>>=
# JOB SATISFACTION: posterior parameters error bars data preparation
errorbars = data.frame()

for (country in countries) {
  summ = summary(stan.fits[[country]], pars = params)$summary
  df = data.frame(
    mean = summ[, c('mean')],
    ci.low = summ[, c('2.5%')],
    ci.up = summ[, c('97.5%')]
  )
  df$label = factor(params.labels, params.labels)
  df$country = country

  errorbars = rbind(errorbars, df)
}

errorbars.plot = ggplot(errorbars) +
  geom_errorbar(
    aes(x = label, ymin = ci.low, ymax = ci.up),
    color = 'dodgerblue',
    size = 1,
    width = 0.7
  ) +
  geom_point(aes(x = label, y = mean), colour = 'red', size = 2) +
  labs(x = 'Answer', y = 'Probability') +
  theme(axis.text.x = element_text(
    size  = 7,
    angle = 55,
    hjust = 1,
    vjust = 1)
  ) +
  facet_wrap(~country)

ggsave(
  paste('../plots/job_satisfaction_posterior_errorbars.png'),
  errorbars.plot
)
@

\begin{figure}[H]
\centering
<<fig=True,width=6,height=9,echo=FALSE>>=
errorbars.plot
@
\caption{todo.}\label{fig_2}
\end{figure}

<<echo=FALSE>>=
# JOB SATISFACTION: posterior predictive probabilities
posterior.satisfied = data.frame()

for (country in countries) {
  posterior.pred = extract(stan.fits[[country]], pars = 'y_pred')$y_pred
  num.satisfied = length(Filter(function(x) x == params.satisfied, posterior.pred))
  df = data.frame(satisfaction = num.satisfied / length(posterior.pred), country = country)
  posterior.satisfied  = rbind(posterior.satisfied, df)
}

posterior.prob.plot = ggplot(posterior.satisfied) +
  geom_bar(
    aes(x = reorder(country, satisfaction), y = 1),
    stat = 'identity',
    fill = 'coral'
  ) +
  geom_bar(
    aes(x = reorder(country, satisfaction), y = satisfaction),
    stat = 'identity',
    fill = 'olivedrab2'
  ) +
  geom_text(
    aes(x = country, y = 0, label = format(round(satisfaction, 4), nsmall = 4)),
    hjust = -.3
  ) +
  coord_flip() +
  labs(x = 'Country', y = 'Probability')

ggsave(
  paste('../plots/job_satisfaction_posterior_probabilities.png'),
  posterior.prob.plot
)
@

\begin{figure}[H]
\centering
<<fig=True,width=5,height=4,echo=FALSE>>=
posterior.prob.plot
@
\caption{todo.}\label{fig_3}
\end{figure}

\section{Purchasing Power}
todo

<<echo=False>>=
# PURCHASING POWER: data preparation, observed box plot construction
data.salary = GetNonNaData('salary_midpoint', 'big_mac_index')
data.salary$country = droplevels(data.salary$country)
data.salary$purchasing_power = data.salary$salary_midpoint / data.salary$big_mac_index

# observed data density plot
purchasing.power.observed.density.plot = ggplot(data.salary) +
  geom_density(aes(x = purchasing_power, fill = country)) +
  facet_wrap(~country) +
  theme(
    legend.position = 'none',
    axis.text.x = element_text(
      angle = 45,
      hjust = 1,
      vjust = 1
    )
  ) +
  labs(x = 'Purchasing Power', y = 'Density')

# observed data box plot
purchasing.power.observed.box.plot = ggplot(data.salary) +
  geom_boxplot(aes(x = country, y = purchasing_power, fill = country), notch = TRUE) +
  theme(
    legend.position = 'none',
    axis.text.x = element_text(
      angle = 45,
      hjust = 1,
      vjust = 1
    )
  ) +
  labs(x = 'Country', y = 'Purchasing Power')

ggsave(
  paste('../plots/purchasing_power_observed_density.png'),
  purchasing.power.observed.density.plot
)
ggsave(
  paste('../plots/purchasing_power_observed_box_plot.png'),
  purchasing.power.observed.box.plot
)
@

\begin{figure}[H]
\centering
<<fig=True,width=5,height=4,echo=FALSE>>=
purchasing.power.observed.density.plot
@
\caption{todo.}\label{fig_4}
\end{figure}


\begin{figure}[H]
\centering
<<fig=True,width=5,height=4,echo=FALSE>>=
purchasing.power.observed.box.plot
@
\caption{todo.}\label{fig_5}
\end{figure}

<<echo=FALSE>>=
# PURCHASING POWER: stan data preparation
countries = unique(data.salary$country)

k = length(countries)
n = c()
ys = list()

for (country in countries) {
  country.purchasing_power = data.salary$purchasing_power[data.salary$country == country]
  n = c(n, length(country.purchasing_power))
  ys[[country]] = country.purchasing_power
}

max_n = max(n)
y = data.frame(matrix(NA, nrow = max_n, ncol = k))
colnames(y) = countries

for (country in countries) {
  length(ys[[country]]) = max_n
  y[, country] = ys[[country]]
}

# stan doesn't support NA
y[is.na(y)] = 0

stan.data = list(
  k = k,
  n = n,
  max_n = max_n,
  y = y
)
@

<<computation,results=hide,echo=FALSE>>=
# PURCHASING POWER: model fitting and diagnostic plots saving
params = c(
  'bg_mu', 'bg_s2', 'wg_s2',
  paste('wg_mu[', 1:k, ']', sep = ''),
  paste('wg_s2[', 1:k, ']', sep = '')
)

stan.fit = stan(
  file = '../models/hierarchical_normal_inv_gamma.stan',
  data = stan.data,
  iter = 1000,
  warmup = 200,
  chains = 1
)

trace.plot = traceplot(stan.fit, pars = params, nrow = 9, ncol = 3)
ggsave('../plots/purchasing_power_traceplot.png', trace.plot)

summ = summary(stan.fit, pars = params)$summary
write.table(summ, file = '../plots/purchasing_power_summary.txt')
@

\section{Relationships}
todo

<<echo=FALSE>>=
# REALATIONSHIPS: data preparation
cols = c(
  'age_midpoint', 'gender', 'experience_midpoint', 'salary_midpoint',
  'team_size_range', 'women_on_team', 'remote', 'job_satisfaction',
  'big_mac_index'
)
relationships.data = na.omit(data.cleaned[, cols])

relationships.data$purchasing_power = relationships.data$salary_midpoint / relationships.data$big_mac_index
relationships.data = relationships.data[, !(names(relationships.data) %in% c('salary_midpoint', 'big_mac_index'))]

# job satisfaction
# 'I hate my job',
# 'I\'m somewhat dissatisfied with my job',
# 'I\'m neither satisfied nor dissatisfied',
# 'I\'m somewhat satisfied with my job',
# 'I love my job'
relationships.data = relationships.data[relationships.data$job_satisfaction != 'I don\'t have a job',]
relationships.data$job_satisfaction = droplevels(relationships.data$job_satisfaction)
reordered.levels = levels(relationships.data$job_satisfaction)[c(1, 4, 3, 5, 2)]
relationships.data$job_satisfaction = factor(relationships.data$job_satisfaction, reordered.levels)
relationships.data$job_satisfaction = as.numeric(relationships.data$job_satisfaction)

# gender
# 'Female'
# 'Male'
relationships.data$gender = as.numeric(relationships.data$gender)

# team size
# '1-4 people'
# '5-9 people'
# '10-14 people'
# '15-20 people'
# '20+ people'
relationships.data = relationships.data[!relationships.data$team_size_range %in% c('I am not on a team', 'I don\'t know'),]
relationships.data$team_size_range = droplevels(relationships.data$team_size_range)
reordered.levels = levels(relationships.data$team_size_range)[c(1, 5, 2, 3, 4)]
relationships.data$team_size_range = factor(relationships.data$team_size_range, reordered.levels)
relationships.data$team_size_range = as.numeric(relationships.data$team_size_range)

# women on team
# 0, ..., 10, 11+
relationships.data = relationships.data[!relationships.data$women_on_team %in% c('I am not on a \"team\"', 'I\'m not sure'),]
relationships.data$women_on_team = droplevels(relationships.data$women_on_team)
reordered.levels = levels(relationships.data$women_on_team)[c(1, 2, 5:12, 3, 4)]
relationships.data$women_on_team = factor(relationships.data$women_on_team, reordered.levels)
relationships.data$women_on_team = as.numeric(relationships.data$women_on_team) - 1

# remote
# 'Never'
# 'I rarely work remotely'
# 'Part-time remote'
# 'Full-time remote'
reordered.levels = levels(relationships.data$remote)[c(3, 2, 4, 1)]
relationships.data$remote = factor(relationships.data$remote, reordered.levels)
relationships.data$remote = as.numeric(relationships.data$remote)
@

<<echo=FALSE>>=
# REALATIONSHIPS: stan data preparation
x = relationships.data[, names(relationships.data) != 'job_satisfaction']
y = relationships.data$job_satisfaction

# dummy variables
DummyEncode = function(df, col.name) {
  dummy = model.matrix(~factor(df[, col.name]))
  colnames(dummy) = paste(col.name, 1:ncol(dummy), sep = '_')
  df = cbind(df[, names(df) != col.name], dummy[, 2:ncol(dummy)])
  return(df)
}

x$gender_male = x$gender - 1
x = x[, names(x) != 'gender']
x = DummyEncode(x, 'remote')
x = DummyEncode(x, 'team_size_range')

# scale, center
x$purchasing_power = (x$purchasing_power - mean(x$purchasing_power)) / sd(x$purchasing_power)
x$experience_midpoint = (x$experience_midpoint - mean(x$experience_midpoint)) / sd(x$experience_midpoint)
x$age_midpoint = (x$age_midpoint - mean(x$age_midpoint)) / sd(x$age_midpoint)
# women_on_team?
x$women_on_team = (x$women_on_team - mean(x$women_on_team)) / sd(x$women_on_team)

k = length(unique(y))
stan.data = list(
  n = nrow(x),
  k = k,
  d = ncol(x),
  y = y,
  x = x
)
@

<<computation,results=hide,echo=FALSE>>=
# RELATIONSHIPS: model fitting and diagnostic plots saving
params = c(
  paste('beta[', 1:ncol(x), ']', sep = ''),
  paste('threshold[', seq(1, k - 1, 1), ']', sep = '')
)

stan.fit = stan(
  file = '../models/ordinal_logistic_regression.stan',
  data = stan.data,
  iter = 1000,
  warmup = 200,
  chains = 1
)

# save a traceplot
trace.plot = traceplot(stan.fit, pars = params)
ggsave('../plots/relationships_traceplot.png', trace.plot)

summ = summary(stan.fit, pars = params)$summary
write.table(summ, file = '../plots/relationships_summary.txt')
@

<<echo=FALSE>>=
# REALATIONSHIPS: regressors correlation
corr = round(cor(x), 1)
corr.plot = ggcorrplot(
  corr,
  lab = TRUE,
  lab_size = 2.5,
  outline.col = "white",
  colors = c('#6D9EC1', 'white', '#E46726'),
  legend.title = 'Correlation',
  tl.cex = 8
)
ggsave('../plots/relationships_correlation.png', corr.plot)
@

\begin{figure}[H]
\centering
<<fig=True,width=5,height=4,echo=FALSE>>=
corr.plot
@
\caption{todo.}\label{fig_6}
\end{figure}

<<echo=FALSE>>=
# REALATIONSHIPS: posterior params boxplot
posterior.params = as.data.frame(stan.fit, pars = params[1:ncol(x)])
names(posterior.params) = names(x)

posterior.params.plot = ggplot(stack(posterior.params)) +
  geom_boxplot(aes(x = factor(ind, levels = names(posterior.params)), y = values, fill = ind), notch = TRUE) +
  theme(
    legend.position = 'none',
    axis.text.x = element_text(
      angle = 45,
      hjust = 1,
      vjust = 1
    )
  ) +
  labs(x = 'todo', y = 'todo')
@

\begin{figure}[H]
\centering
<<fig=True,width=5,height=4,echo=FALSE>>=
posterior.params.plot
@
\caption{todo.}\label{fig_7}
\end{figure}

\end{document}
